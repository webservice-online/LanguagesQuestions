{ question: " You would like to print each score on its own line with its cardinal position. Without using **var** or **val**, which method allows iteration with both the value and its position?


fun main() {
  val highScores = listOf(4000, 2000, 10200, 12000, 9030)
}


- [x] `.withIndex()`
- [ ] `.forEachIndexed()`
- [ ] `.forEach()`
- [ ] `.forIndexes()`

[reference](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/with-index.html)


{ question: " When the **Airplane** class is instantiated, it displays **Aircraft = null**, not **Aircraft = C130** why?


abstract class Aircraft {
  init { println("Aircraft = ${getName()}") }
  abstract fun getName(): String
}
class Airplane(private val name: String) : Aircraft() {
  override fun getName(): String = name
}

- [x] Abstract function always returns null
- [ ] Classes are initialized in the same order they are in the file, therefore, Aircraft should appear after Airplane
- [ ] The code needs to pass the parameter to the base class's primary constructor. Since it does not, it receives a null
- [ ] A superclass is initialized before its subclass. Therefore, name has not been set before it is rendered


{ question: " Your application has an **add** function. How could you use its **invoke** methods and display the results?


fun add(a: Int, b: Int): Int {
  return a + b
}


- [x] `println(::add.invoke(5, 10))`
- [ ] `println(add(5,10).invoke())`
- [ ] `println(::add.invoke{5, 10})`
- [ ] `println(add.invoke(5,10))`

[reference](https://kotlinlang.org/docs/operator-overloading.html#invoke-operator)



{ question: " You pass an integer to a function expecting type Any. It works without issue. Why is a primitive integer able to work with a function that expects an object?


fun showHashCode(obj: Any){
  println("${obj.hasCode()}")
}
fun main() {
  showHashCode(1)
}

- [x] The integer is autoboxed to a Kotlin Int class
- [ ] While the code runs, it does not produce correct results
- [ ] The integer is always a class
- [ ] The compiler runs an implicit `.toClass()` method on the integer


{ question: " You have started a long-running coroutine whose job you have assigned to a variable named **task**. If the need arose, how could you abort the coroutine?


val task = launch {
  // long running job
}

- [x] `task.cancel()`
- [ ] `task.join()`
- [ ] `task.abort()`
- [ ] `job.stop()`


[reference](https://kotlinlang.org/docs/cancellation-and-timeouts.html)


{ question: "You have written a snippet of code to display the results of the roll of a six-sided die. When the die displays from 3 to 6 inclusive, you want to display a special message. Using a Kotlin range, what code should you add?


when (die) {
  1 -> println("die is 1")
  2 -> println("die is 2")
  ___ -> printlin("die is between 3 and 6")
  else -> printlin("die is unknown")
}


- [x] `3,4,5,6`
- [x] `in 3..6`
- [ ] `3 : 6`
- [ ] `{3,4,5,6}`

[reference](https://kotlinlang.org/docs/ranges.html)


{ question: "This code does not print any output to the console. What is wrong?


firstName?.let {
  println("Greeting $firstname!")
}

- [x] `firstName` is equal to `null`
- [ ] A null pointer exception is thrown
- [ ] `firstName` is equal to an empty string
- [ ] `firstName` is equal to Boolean `false`

[reference](https://kotlinlang.org/docs/scope-functions.html#with)

{ question: "You have a function simple() that is called frequently in your code. You place the inline prefix on the function. What effect does it have on the code?


inline fun simple(x: Int): Int{
  return x * x
}

fun main() {
  for(count in 1..1000) {
    simple(count)
  }
}

- [x] The compiler warns of insignificant performance impact
- [ ] The code will give a stack overflow error
- [ ] The compiler warns of significant memory usage
- [ ] The code is significantly faster

[reference](https://discuss.kotlinlang.org/t/inlining-tiny-methods/17084)


{ question: "How do you fill in the blank below to display all of the even numbers from 1 to 10 with least amount of code?


for (_____) {
  println("There are $count butterflies.")
}

- [x] `count in 2..10 step 2`
- [ ] `count in 1..10`
- [ ] `count in 1..10 % 2`
- [ ] `var count=2; count <= 10; count+=2`

[reference](https://kotlinlang.org/docs/ranges.html)


{ question: "What value is printed by println()?


val set = setOf("apple", "pear", "orange", "apple")
println(set.count())


- [x] 3
- [ ] 4
- [ ] 1
- [ ] 5

[reference](https://zetcode.com/kotlin/sets/)


{ question: "In the file main.kt, you are filtering a list of integers and want to use an already existing function, removeBadValues. What is the proper way to invoke the function from filter in the line below?


val list2 = (80..100).toList().filter(_____)


- [x] `::removeBadValues`
- [ ] `GlobalScope.removeBadValues()`
- [ ] `Mainkt.removeBadValues`
- [ ] `removeBadValues`

[reference](https://kotlinlang.org/docs/reflection.html#callable-references)


{ question: "Kotlin will not compile this code snippet. What is wrong?


class Employee
class Manager : Employee()


- [x] In order to inherit from a class, it must be marked **open**
- [ ] In order to inherit from a class, it must be marked **public**
- [ ] In order to inherit from a class, it must be marked **sealed**
- [ ] In order to inherit from a class, it must be marked **override**

[reference](https://kotlinlang.org/docs/inheritance.html)


{ question: "From the Supervisor subclass, how do you call the Employee class's display() method?


open class Employee(){
  open fun display() = println("Employee display()")
}
class Supervisor : Employee() {
  override fun display() {
    println("Supervisor display()")
  }
}

- [x] `super.display()`
- [ ] `Employee.display() `
- [ ] `::display()`
- [ ] `override.display()`

[reference](https://kotlinlang.org/docs/inheritance.html#calling-the-superclass-implementation)

{ question: "The code below compiled and executed without issue before the addition of the line declaring errorStatus. Why does this line break the code?


sealed class Status(){
  object Error : Status()
  class Success : Status()
}
fun main(){
  var successStatus = Status.Success()
  var errorStatus = Status.Error()
}


- [x] `StatusError` is an object, not a class and cannot be instantiated
- [ ] Only one instance of the class `Status` can be instantiated at a time
- [ ] `Status.Error` must be declared as an immutable type
- [ ] `Status.Error` is pribate to class and cannot be declared externally

[reference](https://kotlinlang.org/docs/object-declarations.html)



{ question: "The code below is expected to display the numbers from 1 to 10, but it does not. Why?


val seq = sequence { yieldAll(1..20) }
  .filter { it < 11 }
  println(seq)

- [x] To produce result, a sequence must have terminal operation. In this case, it needs a `.toList()`
- [ ] You cannot assign a sequence to a variable
- [ ] The `.filter{ it < 11 }` should be `.filter{ it > 11 }`
- [ ] The `yieldAll(1..20)` should be `yieldAll(1..10)`

[reference](https://kotlinlang.org/docs/sequences.html#sequence-operations)

{ question: "What three methods does this class have?


class Person


- [x] `equals(), hashCode(), and toString()`
- [ ] `equals(), toHash(), and super()`
- [ ] `print(), println(), and toString()`
- [ ] `clone(), equals(), and super()`

[reference](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/)


{ question: "In order to subclass the Person class, what is one thing you must do?

abstract class Person(val name: String) {
  abstract fun displayJob(description: String)
}

- [x] You must override the `displayJob()` method
- [ ] The subclass must be marked sealed
- [ ] You must mark the subclass as final
- [ ] An abstract class cannot be extended, so you must change it to open

[reference](https://kotlinlang.org/docs/inheritance.html)

{ question: "The code snippet below translates a database user to a model user. Because their names are both User, you must use their fully qualified names, which is cumbersome. You do not have access to either of the imported classes' source code. How can you shorten the type names?


import com.tekadept.app.model.User
import com.tekadept.app.database.User

class UserService{
  fun translateUser(user: com.tekadept.app.database.User): User =
    com.tekadept.app.model.User("${user.first} ${user.last}")
}


- [x] Use import as to change the type name
- [ ] Create subtypes with shorter names
- [ ] Create interfaces with shorter names
- [ ] Create extension classes with shorter names

[reference](https://kotlinlang.org/docs/packages.html#visibility-of-top-level-declarations)


{ question: "You have an enum class Signal that represents the state of a network connection. You want to print the position number of the SENDING enum. Which line of code does that?

java
enum class Signal { OPEN, CLOSED, SENDING }

- [x] `println(Signal.SENDING.ordinal)`
- [ ] `println(Signal.SENDING.position())`
- [ ] `println(Signal.SENDING.hashCode())`
- [ ] `println(Signal.SENDING)`


[reference](https://kotlinlang.org/docs/enum-classes.html#working-with-enum-constants)

{ question: "Both const and @JvmField create constants. What can const do that @JvmField cannot?

java
class Detail {
  companion object {
    const val COLOR = "Blue"
    @JvmField val SIZE = "Really Big"
  }
}

- [x] The compiler will inline const so it is faster and more memory efficient
- [ ] `const` is compatible with Java, but `@JvmField` is not
- [ ] Virtually any type can be used with const but not `@JvmField`
- [ ] const can also be used with mutable types

[reference](https://kotlinlang.org/docs/java-to-kotlin-interop.html#static-fields)

{ question: "You have a when expression for all of the subclasses of the class Attribute. To satisfy the when, you must include an else clause. Unfortunately, whenever a new subclass is added, it returns unknown. You would prefer to remove the else clause so the compiler generates an error for unknown subtypes. What is one simple thing you can do to achieve this?


open class Attribute
class Href: Attribute()
class Src: Attribute()
class Alt: Attribute()

fun getAttribute(attribute: Attribute) : String {
  return when (attribute) {
    is Href -> "href"
    is Alt -> "alt"
    is Src -> "src"
    else -> "unknown"
  }
}

- [x] Replace `open` with `sealed`
- [ ] Replace `open` with `closed`
- [ ] Replace `open` with `private`
- [ ] Replace `open` with `public`

[reference](https://kotlinlang.org/docs/sealed-classes.html)


{ question: "Why doesn't this code compile?

val addend = 1
infix fun Int.add(added: Int=1) = this + addend
fun main(){
  val msg = "Hello"
  println( msg shouldMatch "Hello")
  println( 10 multiply 5 + 2)
  println( 10 add 5)
}

- [x] infix functions cannot have default values
- [ ] infix function must be marked public
- [ ] In Kotlin, add is a keyword
- [ ] Extension functions use `it`, not `this`, as the default parameter name

[reference](https://kotlinlang.org/docs/functions.html#infix-notation)


{ question: "Which line of code is a shorter, more idiomatic version of the displayed snippet?

val len: Int = if (x != null) x.length else -1

- [x] `val len = x?.length ?: -1`
- [ ] `val len = x?.let{x.len} else {-1}`
- [ ] `val len = x!!.length ?: -1`
- [ ] `val len:Int = (x != null)? x.length : -1`


{ question: "You are creating a Kotlin unit test library. What else should you add to make the following code compile without error?


fun String.shouldEqual(value: String) = this == value
fun main(){
  val msg = "test message"
  println(msg shouldEqual "test message")
}

- [x] Add the prefix `infix` to the `shouldMatch` extension function
- [ ] The extension function should be marked `public`
- [ ] Add the prefix `operator` to the `shouldMatch` extension function
- [ ] The code is not legal in Kotlin (should be `println(msg.shouldEqual("test message"))`)


{ question: "What is the difference between the declarations of COLOR and SIZE?


class Record{
  companion object {
    const val COLOR = "Red"
    val SIZE = "Large"
  }
}


- [x] Both are immutable, but the use of the keyword const makes `COLOR` faster and more space efficient than `SIZE`
- [ ] Since `COLOR` and `SIZE` are both immutable, they are identical internally
- [ ] Both are immutable, but the use of the keyword const makes `COLOR` slower and less space efficient than `SIZE`
- [ ] const makes `COLOR` faster, but not compatible with Java. Without const, `SIZE` is still compatible with Java

[reference](https://kotlinlang.org/docs/properties.html#compile-time-constants)

{ question: "Why does not this code snippet compile?


class Cat (name: String) {
  fun greet() { println("Hello ${this.name}") }
}

fun main() {
  val thunderCat = Cat("ThunderCat")
  thunderCat.greet()
}


- [x] Classes cannot be immutable. You need to change `var` to `val`
- [ ] Because name is a class parameter, not a property-it is unresolved `main()`.
- [ ] In order to create an instance of a class, you need the keyword `new`
- [ ] The reference to name needs to be scoped to the class, so it should be `this.name`

Note: By default, constructor parameters can only be used in the initializer blocks or property initializers declared in the class body. Therefore, to let the `greet` function have access to the `name` parameter, it should be declared as a property: `class Cat (val name: String) { ... }`

[reference](https://kotlinlang.org/docs/classes.html#constructors)

{ question: "The code below shows a typical way to show both index and value in many languages, including Kotlin. Which line of code shows a way to get both index and value more idiomatically?


var ndx = 0;
for (value in 1..5){
  println("$ndx - $value")
  ndx++
}


- [x] `for( (ndx, value) in (1..20).withIndex() ){`
- [ ] `for( (ndx, value) in (1..20).pair() ){`
- [ ] `for( Pair(ndx, value) in 1..20 ){`
- [ ] `for( (ndx, value) in *(1..20) ){`

[reference](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/with-index.html)


{ question: "How can you retrieve the value of the property codeName without referring to it by name or destructuring?


data class Project(var codeName: String, var version: String)
fun main(){
  val proj = Project("Chilli Pepper", "2.1.0")
}


- [x] `proj.component1()`
- [ ] `proj.0`
- [ ] `proj[0]`
- [ ] `proj[1]`

[reference](https://kotlinlang.org/docs/destructuring-declarations.html)

{ question: "This function generates Fibonacci sequence. Which function is missing?


fun fibonacci() = sequence {
  var params = Pair(0, 1)
  while (true) {
    ___(params.first)
    params = Pair(params.second, params.first + params.second)
  }
}


- [x] `yield()`
- [ ] `with()`
- [ ] `skip()`
- [ ] `return()`

[reference](https://kotlinlang.org/docs/sequences.html#from-chunks)


{ question: "In this code snippet, why does the compiler not allow the value of y to change?


for(y in 1..100) y+=2


- [x] `y` is an implicitly immutable value
- [ ] `y` must be declared with `var` to be mutable
- [ ] `y` can change only in a while loop
- [ ] In order to change `y`, it must be declared outside of the loop

{ question: "You have created a data class, Point, that holds two properties, x and y, representing a point on a grid. You want to use the hash symbol for subtraction on the Point class, but the code as shown will not compile. How can you fix it?


data class Point(val x: Int, val y: Int)

operator fun Point.plus(other: Point) = Point(x + other.x, y + other.y)
operator fun Point.hash(other: Point) = Point(x - other.x, y - other.y)

fun main() {
    val point1 = Point(10, 20)
    val point2 = Point(20, 30)
    println(point1 + point2)
    println(point1 # point2)
}


- [x] You should use `minus` instead of hash, then type alias the minus symbol.
- [ ] You cannot; the hash symbol is not a valid operator.
- [ ] You should replace the word hash with octothorpe, the actual name for the symbol.
- [ ] You need to replace operator with the word `infix`.

{ question: "This code snippet compiles without error, but never prints the results when executed. What could be wrong?


val result = generateSequence(1) { it + 1 }.toList()
println(result)


- [x] The sequence is infinite and lacks an intermediate operation to make `it` finite.
- [ ] The sequence lacks a terminal operation.
- [ ] The expression should begin with `generateSequence(0)`.
- [ ] The `it` parameter should be replaced with `this`.

[reference](https://kotlinlang.org/docs/sequences.html#iterable)

{ question: "An error is generated when you try to compile the following code. How should you change the call to printStudents to fix the error?


fun main() {
    val students = arrayOf("Abel", "Bill", "Cindy", "Darla")
    printStudents(students)
}

fun printStudents(vararg students: String) {
    for(student in students) println(student)
}


- [x] `printStudents(*students)`
- [ ] `printStudents(students.toList())`
- [ ] `printStudents(students!!)`
- [ ] `printStudents(students[])`

[reference](https://kotlinlang.org/docs/functions.html#variable-number-of-arguments-varargs)

{ question: "Both y and z are immutable references pointing to fixed-size collections of the same four integers. Are there any differences?


val y = arrayOf(10, 20, 30, 40)
val z = listOf(10, 20, 30, 40)


- [x] You can modify the contents of the elements in `y` but not `z`.
- [ ] There are not any differences. `y` and `z` are a type alias of the same type.
- [ ] You add more elements to `z` since it is a list.
- [ ] You can modify the contents of the elements in `z` but not `y`.

{ question: "The code snippet compile and runs without issue, but does not wait for the coroutine to show the "there" message. Which line of code will cause the code to wait for the coroutine to finish before exiting?


fun main() = runBlocking {
    val task = GlobalScope.launch {
        delay(1000L)
        println("there")
    }
    println("Hello,")
}


- [x] `task.join()`
- [ ] `task.complete()`
- [ ] `task.wait()`
- [ ] `task.cancel()`

[reference](https://kotlinlang.org/docs/coroutines-basics.html#an-explicit-job)

{ question: "You would like to group a list of students by last name and get the total number of groups. Which line of code accomplishes this, assuming you have a list of the Student data class?


data class Student(val firstName: String, val lastName: String)


- [x] `println(students.groupBy{ it.lastName }.count())`
- [ ] `println(students.groupBy{ it.lastName.first() }.fold().count())`
- [ ] `println(students.groupingBy{ it.lastName.first() }.count())`
- [ ] `println(students.groupingBy{ it.lastName.first() }.size())`

{ question: "Class BB inherits from class AA. BB uses a different method to calculate the price. As shown, the code does not compile. What changes are needed to resolve the compilation error?


open class AA() {
     var price: Int = 0
        get() = field + 10
}
class BB() : AA() {
     var price: Int = 0
        get() = field + 20
}


- [x] You need to add an `open` modifier to `AA.price` and an `override` modifier to `BB.price`.
- [ ] You need to add a `lateinit` modifier to `AA.price`.
- [ ] You simply need to add an `override` modifier to `BB.price`.
- [ ] You need to add a `public` modifier to `AA.price` and a `protected` modifier to `BB.price`.

{ question: "What is the output of this code?


val quote = "The eagle has landed."
println("The length of the quote is $quote.length")


- [x] The length of the quote is `The eagle has landed..length`
- [ ] The length of the quote is The eagle has landed.
- [ ] A compilation error is displayed.
- [ ] The length of the quote is `21`

{ question: "You have an unordered list of high scores. Which is the simple method to sort the highScores in descending order?


fun main() {
    val highScores = listOf(4000, 2000, 10200, 12000, 9030)


- [x] `.sortedDescending()`
- [ ] `.sortedByDescending()`
- [ ] `.descending()`
- [ ] `.sort("DESC")`


{ question: "You have two arrays, a and b. Which line combines a and b as a list containing the contents of both?


val a = arrayOf(1, 2, 3)
val b = arrayOf(100, 200, 3000)


- [x] `val c = listOf(*a, *b)`
- [ ] `val c = list of (a, b)`
- [ ] `val c = a + b`
- [ ] `val c = listOf(a+b)`
- [reference](https://www.baeldung.com/kotlin/combine-arrays#arrayof-and-the-spread-operator)

{ question: "This code is occasionally throwing a null pointer exception (NPE). How can you change the code so it never throws as NPE?


println("length of First Name = ${firstName!!.length}")


- [x] Replace `!!.` with `?.`
- [ ] Replace `!!.` with `?:.`
- [ ] Surround the line with a try/catch block.
- [ ] Replace `!!.` with `?.let`.

[reference](https://kotlinlang.org/docs/null-safety.html#nullable-types-and-non-null-types)

{ question: "Both const and @JvmField create constants. What can @JvmField do that const cannot?


class Styles {
  companion object {
    const val COLOR = "Blue"
      @JvmField val SIZE = "Really big"
   }
}


- [x] `const` works only with strings and primitives. `@JvmField` does not have that restriction.
- [ ] `@JvmField` works as a top-level variable, but `const` works only in a class.
- [ ] `@JvmField` is compatible with Java, but `const` is not.
- [ ] `@JvmField` is always inlined for faster code.

[reference](https://github.com/ythy/blog/issues/328)



{ question: "Given the code below, how can you write the line this.moveTo("LA") more concisely?


data class Student (val name: String, var location: String) {
  fun moveTo (newLoc: String) { location = newLoc }

}

fun main() {

  Student ("Snow", "Cologne").run {

  this.moveTo ("LA")

}


- [x] `moveTo("LA")`
- [ ] `::moveTo("LA")`
- [ ] `_.moveTo("LA")`
- [ ] `it.moveTo("LA")`

{ question: "For the Product class you are designing, you would like the price to be readable by anyone, but changeable only from within the class. Which property declaration implements your design?


- [x] Option 2


var price: Int = 0
  private set


- [ ] Option 1

var price: Int = 0
  public get()
  private set


- [ ] Option 3

var price: Int = 0
  val set

- [ ] Option 4

val price: Int=0


[reference](https://kotlinlang.org/docs/properties.html#getters-and-setters)

{ question: "What will happen when you try to build and run this code snippet?


class SpecialFunction : () -> Unit {
  override fun invoke() {
    println("Invoked from an instance.")
  }
}
fun main() {
  try { SpecialFunction()() }
  catch (ex: Exception) { println("An error occurred") }
}


- [x] The message "Invoked from an instance." is displayed. // the second "()" is equals to .invoke()
- [ ] A syntax error occurs due to the line `SpecialFunction()()`.
- [ ] The message "An Error occurred" is displayed.
- [ ] A compile error occurs. You cannot override the `invoke()` method.


{ question: "Which line converts the binaryStr, whish contain only 0s and 1s, to an integer representing its decimal value?


val binaryStr = "00001111"


- [x] `val myInt = binaryStr.toInt(2)`
- [ ] `val myInt = toInt(binaryStr)`
- [ ] `val myInt = binaryStr.toInt("0b")`
- [ ] `val myInt = binaryStr.toInt()`


{ question: "You have written a function, sort(), that should accept only collections that implement the `Comparable` interface. How can you restrict the function?


fun sort(list: List<T>): List <T> {
    return list.sorted()
}


- [x] Add `<T : Comparable<T>>` between the `fun` keyword and the function name
- [ ] Add `<T -> Comparable<T>>` between the `fun` keyword and the function name
- [ ] Add `Comparable<T>` between the `fun` keyword and the function name
- [ ] Add `<T where Comparable<T>>` between the `fun` keyword and the function name

[reference](https://kotlinlang.org/docs/generics.html#generic-functions)


{ question: "You have created an array to hold three strings. When you run the code bellow, the compiler displays an error. Why does the code fail?


val names = arrayOf<String>(3)
names[3]= "Delta"



- [x] Arrays use zero-based indexes. The value 3 is outside of the array's bounds
- [ ] You accessed the element with an index but should have used.set().
- [ ] You declared the array with val but should have used var
- [ ] You cannot changes the value of an element of an array. You should have used a mutable list.


{ question: "The code below compiles and executes without issue, but is not idiomatic kotlin. What is a better way to impelement the `printlln()`?


fun main() {
  val name: String = "Amos"
  val grade: Float = 95.5f
  println("My name is " + name + ". I score " + grade + " points on the last coding quiz.")
}


- [x] Use string templates instead.
- [ ] Use `new printf()`.
- [ ] Use `string.format` instead.
- [ ] Use `string append` instead.

[reference](https://kotlinlang.org/docs/basic-syntax.html#string-templates)



































